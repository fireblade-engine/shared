name: Xcode

on:
  workflow_call:
    inputs:
      target_platform:
        description: 'Target platform - can be iOS, tvOS'
        required: true
        type: string

jobs:
  xcodebuild:
    name: ${{ inputs.target_platform }} Xcode ${{ matrix.config.xcode }} [${{ matrix.build_config }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config: # newer versions at top
          - { os: "macos-15", xcode: "16.0" }
          - { os: "macos-14", xcode: "15.4" }
        build_config:
          - Debug
          - Release
    steps:
      - uses: actions/checkout@v4

      - name: Cache SPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-xcode-${{ hashFiles('Package.resolved', '**/*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-xcode-

      - name: Select Xcode ${{ matrix.config.xcode }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.config.xcode }}.app

      - name: Find Simulator
        run: |
          SIMULATOR_NAME=$(xcodebuild -showdestinations -scheme "shared-actions-Package" | perl -nle 'if (m/${{ inputs.target_platform }}\sSimulator.*name\:([^\}]+)\s\}\.*/g && $1 !~ /^Any/ && $1 !~ /SE/) { print $1; }' | sort -r | head -n 1)
          echo "Found simulator: $SIMULATOR_NAME"
          echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_ENV

      - name: Build ${{ matrix.build_config }} for Any ${{ inputs.target_platform }} Device
        run: |
          xcodebuild build -scheme "shared-actions-Package" -configuration ${{ matrix.build_config }} -destination "generic/platform=${{ inputs.target_platform }},name=Any ${{ inputs.target_platform }} Device"

      - name: Build ${{ matrix.build_config }} for testing on ${{ inputs.target_platform }} Simulator
        run: | # https://developer.apple.com/documentation/xcode/build-settings-reference#Enable-Testability
          xcodebuild build-for-testing -scheme "shared-actions-Package" -configuration ${{ matrix.build_config }} -destination "platform=${{ inputs.target_platform }} Simulator,OS=latest,name=$SIMULATOR_NAME" ENABLE_TESTABILITY=YES

      - name: Test ${{ matrix.build_config }} on ${{ inputs.target_platform }} Simulator
        run: |
          set -o pipefail && env NSUnbufferedIO=YES xcodebuild test-without-building -scheme "shared-actions-Package" -configuration ${{ matrix.build_config }} -destination "platform=${{ inputs.target_platform }} Simulator,OS=latest,name=$SIMULATOR_NAME"

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ github.job }}-swift_${{ matrix.config.xcode }}-${{ inputs.target_platform }}-${{ matrix.build_config }}-${{ github.run_id }}
          path: |
            ~/Library/Developer/Xcode/DerivedData/
          if-no-files-found: warn
          include-hidden-files: true
